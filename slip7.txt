.
import java.util.Random;

public class MultiThreadApp {
    public static void main(String[] args) {
        NumberGenerator numberGenerator = new NumberGenerator();
        SquareCalculator squareCalculator = new SquareCalculator(numberGenerator);
        CubeCalculator cubeCalculator = new CubeCalculator(numberGenerator);

        Thread t1 = new Thread(numberGenerator);
        Thread t2 = new Thread(squareCalculator);
        Thread t3 = new Thread(cubeCalculator);

        t1.start();
        t2.start();
        t3.start();
    }
}

class NumberGenerator implements Runnable {
    private Random random = new Random();
    private int number;

    public void run() {
        while (true) {
            number = random.nextInt(100);
            System.out.println("Generated number: " + number);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public int getNumber() {
        return number;
    }
}

class SquareCalculator implements Runnable {
    private NumberGenerator numberGenerator;

    public SquareCalculator(NumberGenerator numberGenerator) {
        this.numberGenerator = numberGenerator;
    }

    public void run() {
        while (true) {
            int number = numberGenerator.getNumber();
            if (number % 2 == 0) {
                int square = number * number;
                System.out.println("Square of " + number + ": " + square);
            }
        }
    }
}

class CubeCalculator implements Runnable {
    private NumberGenerator numberGenerator;

    public CubeCalculator(NumberGenerator numberGenerator) {
        this.numberGenerator = numberGenerator;
    }

    public void run() {
        while (true) {
            int number = numberGenerator.getNumber();
            if (number % 2 != 0) {
                int cube = number * number * number;
                System.out.println("Cube of " + number + ": " + cube);
            }
        }
    }
}


Q2.
import java.sql.*;

public class ProductTableDemo {
    static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";
    static final String DB_URL = "jdbc:mysql://localhost/products";

    static final String USER = "root";
    static final String PASS = "password";

    public static void main(String[] args) {
        Connection conn = null;
        Statement stmt = null;

        try {
             Class.forName(JDBC_DRIVER);
            System.out.println("Connecting to database...");
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            System.out.println("Creating product table...");
            stmt = conn.createStatement();
            String sql = "CREATE TABLE IF NOT EXISTS product " +
                    "(pid INT PRIMARY KEY, " +
                    " pname VARCHAR(255), " +
                    " price DECIMAL(10,2))";
            stmt.executeUpdate(sql);
            System.out.println("Inserting records into product table...");
            sql = "INSERT INTO product (pid, pname, price) " +
                    "VALUES (101, 'Product 1', 100.00), " +
                    "(102, 'Product 2', 200.00), " +
                    "(103, 'Product 3', 300.00), " +
                    "(104, 'Product 4', 400.00), " +
                    "(105, 'Product 5', 500.00)";
            stmt.executeUpdate(sql);
            System.out.println("Displaying records from product table...");
            sql = "SELECT * FROM product";
            ResultSet rs = stmt.executeQuery(sql);

            while (rs.next()) {
                int pid = rs.getInt("pid");
                String pname = rs.getString("pname");
                double price = rs.getDouble("price");
 
                System.out.print("ID: " + pid);
                System.out.print(", Name: " + pname);
                System.out.println(", Price: " + price);
            }
 
            rs.close();
            stmt.close();
            conn.close();
        } catch (SQLException se) {
           
            se.printStackTrace();
        } catch (Exception e) {
            
            e.printStackTrace();
        } finally {
            
            try {
                if (stmt != null)
                    stmt.close();
            } catch (SQLException se2) {
            }
            try {
                if (conn != null)
                    conn.close();
            } catch (SQLException se) {
                se.printStackTrace();
            }
        } 
        System.out.println("Goodbye!");
    } 
}